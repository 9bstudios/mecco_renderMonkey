# Syntax is YAML (yaml.org), interpreted with pyYAML.
# A proper code editor is highly recommended for editing.
# Brackets (http://brackets.io) is free, cross-platform, and has built-in YAML support.

# Each list item is a render task.
# Only {s[scene_path]} is required for a task to function. All other parameters are optional,
# see default values below.

###

# {s[scene_path]} - (required) File to render. Should contain a valid OS path to a MODO scene file.

# {s[format]} - (default: {s[format_default]}) Format in which to save rendered images.
#    Allows any of the following:

{s[format_examples]}

# {s[frames]} - (default: {s[frames_default]}) A comma-delimited list of frame ranges in the format 'start-end:step'.
#     Spaces and special characters are ignored, and redundant frames are only rendered once.
#     Examples:

{s[frames_examples]}

# {s[width]} - (default: scene) Frame width in pixels.
#     If a width is supplied but no height--or vise verse--the scene aspect ratio will be maintained.

# {s[height]} - (default: scene) Frame height in pixels.
#     If a width is supplied but no height--or vise verse--the scene aspect ratio will be maintained.

# {s[outputs]} - (default: scene) List of render outputs (by name or id) to save, by name or id.
#     If none are provided, all available render outputs will be rendered as per scene settings.

# {s[camera]} - (default: scene) Camera (by name or id) to use for rendering.
#     If none is provided, the one defined in the scene will be used.

# {s[destination]} - (default: {s[destination_default]}) Where to save the rendered frames.
#    NOTE: Parsing is rather primitive. If the string begins with \"~\", it assumes you're parsing a user folder.
#    If it starts with \".\" or lacks a leading slash, it assumes a relative path from the current scene.
#    If it contains a \":\" anywhere at all, it assumes a MODO path alias. (Search for 'path alias' in MODO docs.)
#    Using a file extension (e.g. 'filename.xyz') designates a file name, but the extension itself will be
#    replaced as appropriate.
#    Examples:

{s[destination_examples]}

# {s[output_pattern]} - (default: scene) Sets the output pattern for file naming. Defaults to the scene file setting.
#     Note that unlike other fields, output patterns must be wrapped in single quotes (').
#     For syntax, search for 'Output Pattern' in MODO docs and click the 'Render Item: Frame' link.

# {s[groups]} - (default: None) Pass groups (by name or id) to render for each frame.
#     If a list of groups is provided, it will multiply each successive group by the former.
#     For example, ['group1','group2'] renders each pass of group2 for each pass of group1.
#     This is useful for pass groups containing orthogonal information,
#     e.g. ['variations','views'] renders each 'view' pass for each 'variation' pass.

# ADVANCED PARAMETERS

# {s[render_channels]} - (default: None) A series of channel:value pairs for the scene render item.
#     Used to define arbitrary render settings on a per-task basis.
#     Channel name must be a valid MODO render channel name. (Discoverable via command history.)
#     Note that any invalid channel:value pair will cause the entire task to be skipped.

# {s[commands]} - (default: None) A list of commands to run before rendering a given task.

# {s[frame_commands]} - (default: None) A list of commands to run before rendering a given frame within a task.

# {s[render_override]} - (default: None) Overrides the render command entirely. NOTE: This necessarily overrides
#     task settings for '{s[destination]}', '{s[format]}', and '{s[groups]}', as these would have been included
#     in the default render command. You'll have to provide these values yourself.
